import jwt
import json
from datetime import datetime, timedelta
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

def generate_jwt(payload, private_key_file, algorithm="RS256"):
    """Generates a signed JWT."""
    with open(private_key_file, "rb") as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None,
            backend=default_backend()
        )

    # Get the key ID from the filename (assuming the filename is "private_key_{key_id}.pem")
    key_id = private_key_file.split("_")[2].split(".")[0]

    headers = {'kid': key_id}  # Include the key ID in the header

    encoded_jwt = jwt.encode(payload, private_key, algorithm=algorithm, headers=headers)
    return encoded_jwt


if __name__ == "__main__":
    # Example Usage
    payload = {
        'iss': 'ExchangeTokens',
        'sub': 'user123',
        'aud': 'your-audience',
        'iat': datetime.utcnow(),
        'exp': datetime.utcnow() + timedelta(minutes=60),
        'name': 'John Doe',
        'email': 'john.doe@example.com',
        'orgId': 'example'
    }

    # Replace with the actual path to your private key file
    private_key_file = "private_key_b9ed59ef-e796-4cda-9ead-1dafe16fea85.pem"  # <--- IMPORTANT: Update this!
    # Replace YOUR_KEY_ID with a key ID generated by the generate_jwks.py script
    # For example: private_key_a1b2c3d4-e5f6-7890-1234-567890abcdef.pem

    try:
        jwt_token = generate_jwt(payload, private_key_file)
        print("Generated JWT:", jwt_token)
    except FileNotFoundError:
        print(f"Error: Private key file not found: {private_key_file}")
    except Exception as e:
        print(f"Error generating JWT: {e}")